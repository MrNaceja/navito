// Generated by dts-bundle-generator v9.5.1

declare class NavitoLink extends HTMLElement {
	/**
	 * The shadow root ref for closed mode.
	 */
	private shadow_root;
	/** A underlined variant (as link) */
	static readonly VARIANT_UNDERLINE = "underline";
	/** A filled variant (as button filled) */
	static readonly VARIANT_FILL = "fill";
	/** A outlined variant (as button wiht border and label with same color) */
	static readonly VARIANT_OUTLINE = "outline";
	/** A ghosted variant (as text with button smoothy style when hover) */
	static readonly VARIANT_GHOST = "ghost";
	/**
	 * Create a navito custom link element instance.
	 */
	constructor();
	/**
	 * Secure getter for navito instance.
	 * @return {Navito}
	 * @throws {Error} - When Navito Instance not defined on window (will be set when navito.on() is called)
	 */
	private get navito();
	/**
	 * Getter for current variant in use. NONE if anyone defined.
	 * @return {NavitoLinkVariant}
	 */
	private get variant();
	/**
	 * Normalize the variant value to clamp in possible values.
	 * @param {undefined | null | string} v
	 * @return {NavitoLinkVariant}
	 */
	private normalizeVariant;
	/**
	 * Define a variant in use.
	 * @param {NavitoLinkVariant} v
	 */
	private set variant(value);
	/**
	 * Return observed attributes to react and reflect changes.
	 * @return {string[]}
	 */
	static get observedAttributes(): string[];
	/**
	 * Callback to handle when observed attributes changes.
	 * @param {string} name     - The attribute name changed
	 * @param {string} old_value - The old attribute value
	 * @param {string} new_value - The new attribute value
	 */
	attributeChangedCallback(attr: string, old_value: string, new_value: string): void;
	/**
	 * Called when this element is appended on the DOM.
	 */
	connectedCallback(): void;
	/**
	 * Define to don´t use variant, util to full customization.
	 * @returns {NavitoLink}
	 */
	noVariant(): this;
	/**
	 * Define to use FILL variant.
	 * @returns {NavitoLink}
	 */
	variantFill(): this;
	/**
	 * Define to use GHOST variant.
	 * @returns {NavitoLink}
	 */
	variantGhost(): this;
	/**
	 * Define to use OUTLINE variant.
	 * @returns {NavitoLink}
	 */
	variantOutline(): this;
	/**
	 * Define to use UNDERLINE variant.
	 * @returns {NavitoLink}
	 */
	variantUnderline(): this;
	/**
	 * Beautify (stylize) the host element.
	 * @returns {NavitoLink}
	 */
	private beautify;
	/**
	 * Handle click on this link to navigate with navito.
	 * @param {MouseEvent} e
	 */
	private handleClick;
}
export type RouteHandler = (context: RouteContext) => Promise<void> | void;
export type HookHandler = (context: RouteContext) => Promise<boolean | void> | (boolean | void);
export type RouteContext = {
	/**
	 * The intercepted route location path.
	 * @example /products/1
	 */
	current_location: string;
	/**
	 * The intercepted route params.
	 * @example /products/:id -> { id: string }
	 */
	route_params: Record<string, string>;
	/**
	 * The intercepted route query params (as URLSearchParams).
	 * @example ...?order=desc -> URLSearchParams({ order: 'desc' })
	 */
	query_params: URLSearchParams;
	/**
	 * The intercepted route query params (as query string)
	 */
	query_string: string;
	/**
	 * The current navigation state.
	 */
	state?: Record<string, any>;
};
export type RouteIntercepter = {
	/**
	 * Add a Before call handler hook.
	 * If hook returns explicit false, the route handler don´t called.
	 */
	before: (...hooks: HookHandler[]) => void;
	/**
	 * Add a After call handler hook.
	 */
	after: (...hooks: HookHandler[]) => void;
};
/**
 * A simple Vanilla JS router called Navito (Navigate To).
 */
declare class Navito {
	/**
	 * The root application path.
	 */
	private root_path;
	/**
	 * The routes intercepters.
	 */
	private routes;
	/**
	 * The abort controller to control when route changes and exists active route running.
	 */
	private navigation_controller;
	/**
	 * The current route running location path.
	 */
	private current_running_path;
	/**
	 * Global hooks to execute in all routes.
	 */
	private global_hooks;
	/**
	 * Create a new Navito instance.
	 * @param {string} root_path [/] - The root path for the application.
	 */
	constructor(root_path?: string);
	/**
	 * Create a NavitoLink instance to use as link navigation with navito instance.
	 * @param {string} to    - The path to navigate
	 * @param {string} label - The link label
	 * @returns {NavitoLink}
	 */
	static Link(to: string, label: string): NavitoLink;
	/**
	 * Compile a route path into a regex and extract parameter names.
	 * @param {string} path - The route path to compile.
	 * @returns {{ regex: RegExp, param_names: string[] }}
	 */
	private compileRoutePath;
	/**
	* Add a global before hooks.
	* @param {HookHandler[]} hooks - The after global hooks.
	* @returns {Navito}
	*/
	before(...hooks: HookHandler[]): this;
	/**
	 * Add a global after hooks.
	 * @param {HookHandler[]} hooks - The before global hooks.
	 * @returns {Navito}
	 */
	after(...hooks: HookHandler[]): this;
	/**
	 * Define a not found (404) hanlder to router.
	 * @param handler - The handler to not found routes
	 * @returns {Navito}
	 */
	whenNotFound(handler: RouteHandler): this;
	/**
	 * Intercept a route path and register a handler for it.
	 * The handler will be called when the route is matched.
	 * @param {string} path          - The route path to intercept.
	 * @param {RouteHandler} handler - The handler function to call when the route is matched.
	 * @returns {RouteIntercepter}
	 */
	intercept(path: string, handler: RouteHandler): RouteIntercepter;
	/**
	 * Initialize the Navito instance and set up event listeners.
	 * This method should be called after all routes have been defined.
	 * @returns {Navito}
	 */
	on(): Navito;
	/**
	 * React to changes in the current path location.
	 * @returns {void}
	 */
	private react;
	/**
	 * Run the route handler and hooks for the given route.
	 * @param route - The route to run.
	 * @returns {Promise<void>}
	 */
	private run;
	/**
	 * Update the active <navito-link/> for current path.
	 * @returns {Navito}
	 */
	private updateActiveLinkForCurrentPath;
	/**
	 * Update navigation state changing browser url and set new route state.
	 * @param {NavigationState} state
	 * @returns {Navito}
	 */
	private updateNavigationState;
	/**
	 * Navigate to a specified path route.
	 * @param path - The path to navigate to.
	 * @returns {Navito}
	 */
	to(path: string): Navito;
	/**
	 * Hook to use a route specified to intercepted path.
	 * @param {string} path - The path to intercepted route
	 * @returns {Route | null}
	 */
	private useRouteByPath;
	/**
	 * Hook to use the current path location without the root path.
	 * @returns {string} - The current path without the root path.
	 */
	private useCurrentPathLocation;
	/**
	 * Hook to use the route context.
	 * @param route - The route to use.
	 * @returns {RouteContext} - The context of the route.
	 */
	private useContext;
}

export {
	Navito as default,
};

export {};
